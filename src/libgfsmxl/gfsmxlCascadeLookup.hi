
/*=============================================================================*\
 * File: gfsmxlCascadeLookup.hi
 * Author: Bryan Jurish <moocow.bovine@gmail.com>
 * Description: finite state machine library: lookup cascade: lookup: inline definitions
 *
 * Copyright (c) 2007-2011 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

/** \file gfsmxlCascadeLookup.hi
 *  \brief First stab at transducer cascade: inline definitions
 */
#include <gfsmAssert.h>

/*======================================================================
 * constructors, etc.
 */

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_cascade_lookup_set_cascade(gfsmxlCascadeLookup *cl, gfsmxlCascade *csc)
{
  if (cl->csc) gfsmxl_cascade_free(cl->csc,TRUE);
  cl->csc = csc;
  cl->heap_neginf.csc  = csc;
  cl->heap_neginf.qids = NULL; //-- unhashable!
  cl->heap_neginf.ipos = (guint32)(-1);
  if (csc && csc->sr) cl->heap_neginf.w    = csc->sr->zero;
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookup *gfsmxl_cascade_lookup_new_full(gfsmxlCascade *csc, gfsmWeight max_w, guint max_paths, guint max_ops)
{
  gfsmxlCascadeLookup *cl = gfsm_slice_new0(gfsmxlCascadeLookup);
  cl->csc       = NULL;
  cl->max_w     = max_w;
  cl->max_paths = max_paths;
  cl->max_ops   = max_ops;
  cl->heap      = gfsmxl_clc_fh_makeheap();
  //fh_setcmp(cl->heap, (voidcmp)gfsmxl_cascade_lookup_config_fh_compare);
  gfsmxl_clc_fh_setneginf(cl->heap, &(cl->heap_neginf));
  cl->configs  = g_hash_table_new_full((GHashFunc)gfsmxl_cascade_lookup_config_ht_hash,
				       (GEqualFunc)gfsmxl_cascade_lookup_config_ht_equal,
				       /*
				       (GDestroyNotify)gfsmxl_cascade_lookup_config_free,
				       (GDestroyNotify)NULL
				       */
				       (GDestroyNotify)NULL,
				       (GDestroyNotify)gfsmxl_cascade_lookup_config_list_free
				       );
  cl->otrie = gfsm_trie_new();
  cl->finals = NULL;
  gfsmxl_cascade_lookup_set_cascade(cl,csc);
  return cl;
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookup *gfsmxl_cascade_lookup_new(void)
{ return gfsmxl_cascade_lookup_new_full(NULL,0,1,((guint)-1)); }

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_cascade_lookup_free(gfsmxlCascadeLookup *cl)
{
  gfsmxl_cascade_lookup_reset(cl);
  if (cl->csc) gfsmxl_cascade_free(cl->csc,TRUE);
  gfsmxl_clc_fh_deleteheap(cl->heap);
  g_hash_table_destroy(cl->configs);
  gfsm_automaton_free(cl->otrie);
}

/*======================================================================
 * gfsmxlCascadeLookup: Low-level Utilities
 */

//--------------------------------------------------------------
GFSM_INLINE
gfsmAutomaton *gfsmxl_cascade_lookup_nbest_prepare_(gfsmxlCascadeLookup *cl, gfsmAutomaton *result)
{
  //-- maybe create result automaton
  if (!result) {
    result = gfsm_automaton_new();
    gfsm_automaton_set_semiring(result,cl->csc->sr);
  } else {
    gfsm_automaton_clear(result);
  }
  result->flags.is_transducer = TRUE;
  result->flags.sort_mode     = gfsmASMNone;
  return result;
}


//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookupConfig *gfsmxl_cascade_lookup_ensure_config(gfsmxlCascadeLookup *cl, gfsmxlCascadeLookupConfig *cfg_key)
{
  gfsmxlCascadeLookupConfig     *cfg_new;
  gfsmxlCascadeLookupConfigList *cfg_list;
  gpointer                       cfg_old_key, cfg_old_val;
  gfsmStateId                    cfg_rid = gfsmNoState;

  //-- check whether an equal-or-better old config already exists
  if (g_hash_table_lookup_extended(cl->configs, cfg_key, &cfg_old_key, &cfg_old_val)) {
    //-- an old config exists...
    gfsmxlCascadeLookupConfig     *cfg_old  = (gfsmxlCascadeLookupConfig *)cfg_old_key;
    if (!gfsm_sr_less(cfg_key->csc->sr, cfg_key->w, cfg_old->w)) {
      //-- old config is better: skip the new one (cfg_key)
      return NULL;
    } else {
      //-- new config (cfg_key) is better: clone & add administrative data
      cfg_rid      = cfg_old->rid;                                //-- grab old result-id into new config
      cfg_list     = (gfsmxlCascadeLookupConfigList*)cfg_old_val; //-- ... inherit list of matching configs
      g_hash_table_steal(cl->configs, cfg_old);                   //-- ... and steal the old hash entry (without freeing)
    }
  } else {
    //-- no old config exists: add a new one by cloning cfg_key (with empty match-list)
    cfg_list = NULL;
  }

  //-- clone cfg_key & add new config the the heap & config-tracker
  cfg_new = gfsmxl_cascade_lookup_config_clone(cfg_key);
  cfg_new->rid = cfg_rid;
  gfsmxl_clc_fh_insert(cl->heap, cfg_new);
  g_hash_table_insert(cl->configs, cfg_new, g_slist_prepend(cfg_list,cfg_new));

  return cfg_new;
}


/*======================================================================
 * gfsmxlPathList: Low-level utilities
 */

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlPathArray *gfsmxl_patharray_new(guint n_paths)
{
  return g_ptr_array_sized_new(n_paths);
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_patharray_free(gfsmxlPathArray *paths)
{
  if (!paths) return;
  gfsmxl_patharray_clear(paths);
  g_ptr_array_free(paths,TRUE);
}


/*======================================================================
 * gfsmxlCascadeLookupConfig
 */

#define GFSMXL_CLC_USE_SLICE 1

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookupConfig *gfsmxl_cascade_lookup_config_new_full(gfsmxlCascade        *csc,
								 gfsmxlCascadeStateId  qids,
								 guint32              ipos,
								 gfsmStateId          oid,
								 gfsmStateId          rid,
								 gfsmWeight           w,
								 gfsmxlCascadeLookupBacktrace bt
								 )
{
  gfsmxlCascadeLookupConfig *lc;
  g_assert(csc!=NULL);

  lc = (gfsmxlCascadeLookupConfig*)
#ifdef GFSMXL_CLC_USE_SLICE
    gfsm_slice_alloc
#else
    g_malloc
#endif
    (sizeof(gfsmxlCascadeLookupConfig) + (csc->depth*sizeof(gfsmStateId)));

  lc->csc  = csc;
  lc->qids = (gfsmxlCascadeStateId)( (void*)(((gchar*)lc) + sizeof(gfsmxlCascadeLookupConfig)) );
  lc->ipos   = ipos;
  lc->oid    = oid;
  lc->rid    = rid;
  lc->w      = w;
  lc->bt     = bt;
  gfsmxl_cascade_stateid_sized_copy(lc->qids, qids, csc->depth);
  return lc;
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookupConfig *gfsmxl_cascade_lookup_config_new(gfsmxlCascadeLookup *cl)
{
  return gfsmxl_cascade_lookup_config_new_full(cl->csc,
					       gfsmxl_cascade_get_root(cl->csc),
					       0,
					       0,
					       0,
					       cl->csc->sr->one,
					       gfsmxl_bt_null
					       );
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_cascade_lookup_config_free_inline(gfsmxlCascadeLookupConfig *lc)
{
#ifdef GFSMXL_CLC_USE_SLICE
  guint depth;
  g_assert(lc->csc != NULL);
  depth = lc->csc->depth;
  if (depth > 3) fprintf(stderr, "csc=%p, depth=%u\n", lc->csc, depth);
  gfsm_slice_free1(sizeof(gfsmxlCascadeLookupConfig)+(depth*sizeof(gfsmStateId)), lc);
#else
  g_free(lc);
#endif
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_cascade_lookup_config_copy(gfsmxlCascadeLookupConfig *dst, gfsmxlCascadeLookupConfig *src)
{
  dst->csc    = src->csc;
  dst->ipos   = src->ipos;
  dst->oid    = src->oid;
  dst->rid    = src->rid;
  dst->w      = src->w;
  dst->bt     = src->bt;
  gfsmxl_cascade_stateid_sized_copy(dst->qids,src->qids,src->csc->depth);
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlCascadeLookupConfig *gfsmxl_cascade_lookup_config_clone(gfsmxlCascadeLookupConfig *src)
{
  return gfsmxl_cascade_lookup_config_new_full(src->csc, src->qids, src->ipos, src->oid, src->rid, src->w, src->bt);
}


//--------------------------------------------------------------
GFSM_INLINE
int gfsmxl_cascade_lookup_config_fh_compare(gfsmxlCascadeLookupConfig *lc1, gfsmxlCascadeLookupConfig *lc2)
{
  //-- compare: weight
  if (gfsm_sr_less(lc1->csc->sr, lc1->w, lc2->w)) return -1;
  if (gfsm_sr_less(lc1->csc->sr, lc2->w, lc1->w)) return  1;
  //
  //-- compare: input position
  if (lc1->ipos < lc2->ipos) return  1;
  if (lc1->ipos > lc2->ipos) return -1;
  //
  //-- default
  return 0;
}


/*======================================================================
 * END
 */
//--------------------------------------------------------------
