
/*=============================================================================*\
 * File: gfsmxlLabelIndex.hi
 * Author: Bryan Jurish <moocow.bovine@gmail.com>
 * Description: finite state machine library: label index: inline definitions
 *
 * Copyright (c) 2007-2011 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

/** \file gfsmxlLabelIndex.hi
 *  \brief Label-indexed automata: inline definitions
 */

/*======================================================================
 * gfsmxlArcPtrArray
 */

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_arc_ptr_array_free(gfsmxlArcPtrArray *apa)
{
  gfsm_assert(apa!=NULL);
  g_ptr_array_free(apa,TRUE);
}



/*======================================================================
 * gfsmxlArcBlockIndex
 */

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlStateLabelPair *gfsmxl_state_label_pair_new(gfsmStateId qid, gfsmLabelId lab)
{
  gfsmxlStateLabelPair *slp = gfsm_slice_new(gfsmxlStateLabelPair);
  slp->qid = qid;
  slp->lab = lab;
  return slp;
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_state_label_pair_free(gfsmxlStateLabelPair *slp)
{
  gfsm_slice_free(gfsmxlStateLabelPair,slp);
}


//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_arc_block_index_free(gfsmxlArcBlockIndex *abx)
{
  gfsm_assert(abx!=NULL);
  if (abx->blocks)  gfsmxl_arc_ptr_array_free(abx->blocks);
  if (abx->q2block) g_ptr_array_free(abx->q2block,TRUE);
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_arcrange_open_block_index(gfsmArcRange *range, gfsmxlArcBlockIndex *abx, gfsmStateId qid, gfsmLabelId lo)
{
  gfsmArc **app     = (gfsmArc**)g_ptr_array_index(abx->q2block,qid);
  gfsmArc **app_max = (gfsmArc**)g_ptr_array_index(abx->q2block,qid+1);
  while (app && app < app_max && (*app)->lower < lo) { ++app; }
  if (app && app < app_max && (*app)->lower == lo) {
    range->min = *app;
    range->max = *(app+1);
  }
  else {
    range->min = NULL;
    range->max = NULL;
  }
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_arcrange_open_block_index_bsearch(gfsmArcRange *range, gfsmxlArcBlockIndex *abx, gfsmStateId qid, gfsmLabelId lo)
{
  gfsmArc **min = (gfsmArc**)g_ptr_array_index(abx->q2block,qid);
  gfsmArc **max = (gfsmArc**)g_ptr_array_index(abx->q2block,qid+1);
  range->max    = *max;
  while (min && min < max) {
    gfsmArc **mid = min + (max-min)/2;
    if ( (*mid)->lower < lo ) { min=mid+1; }
    else                      { max=mid; }
  }
  range->min = min ? (*min) : NULL;
}


/*======================================================================
 * gfsmxlArcBlockHash
 */

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_arc_block_hash_free(gfsmxlArcBlockHash *abh)
{ g_hash_table_destroy(abh); }


/*======================================================================
 * END
 */
//--------------------------------------------------------------
