
/*=============================================================================*\
 * File: gfsmxlSuffixIndex.hi
 * Author: Bryan Jurish <moocow.bovine@gmail.com>
 * Description: finite state machine library: suffix-length indices: inline definitions
 *
 * Copyright (c) 2009-2011 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

/** \file gfsmxlSuffixIndex.hi
 *  \brief Suffix-length-indexed automata: inline definitions
 */

/*======================================================================
 * gfsmxlSuffixLength
 */

/*======================================================================
 * gfsmxlSuffixLengthArray
 */

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_suffix_length_array_free(gfsmxlSuffixLengthArray *sla)
{
  gfsm_assert(sla!=NULL);
  g_array_free(sla,TRUE);
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlSuffixLength *gfsmxl_suffix_length_array_data(gfsmxlSuffixLengthArray *sla)
{
  gfsm_assert(sla!=NULL);
  return (gfsmxlSuffixLength*)sla->data;
}

//--------------------------------------------------------------
GFSM_INLINE
gfsmxlSuffixLength gfsmxl_suffix_length_array_get(gfsmxlSuffixLengthArray *sla, gfsmStateId qid)
{
#if 0
  gfsm_assert(sla!=NULL);
  gfsm_assert(qid<sla->len);
#endif
  return g_array_index(sla,gfsmxlSuffixLength,qid);
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_suffix_length_array_set(gfsmxlSuffixLengthArray *sla, gfsmStateId qid, gfsmxlSuffixLength pl)
{
#if 0
  gfsm_assert(sla!=NULL);
  gfsm_assert(qid<sla->len);
#endif
  g_array_index(sla,gfsmxlSuffixLength,qid) = pl;
}


/*======================================================================
 * gfsmxlSuffixLengthIndex
 */

//--------------------------------------------------------------
GFSM_INLINE
void gfsmxl_suffix_length_index_free(gfsmxlSuffixLengthIndex *slx)
{
  gfsm_assert(slx!=NULL);
  if (slx->lo) gfsmxl_suffix_length_array_free(slx->lo);
  if (slx->hi) gfsmxl_suffix_length_array_free(slx->hi);
  gfsm_slice_free(gfsmxlSuffixLengthIndex,slx);
}


/*======================================================================
 * END
 */
//--------------------------------------------------------------
